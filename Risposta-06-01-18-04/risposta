## Classificazione dello script e traduzione in MLflow Recipe

Lo script fornito esegue una classificazione binaria utilizzando un Random Forest Classifier per predire se un vino è bianco o rosso. Di conseguenza, il nome della recipe sarà `classification`.

Ecco la traduzione dello script in una MLflow Recipe, suddivisa in file separati:

**1. ingest.py**

```python
import pandas as pd

def ingest_data(file_paths):
  """
  Carica i dati dei vini bianchi e rossi e aggiunge la colonna target.

  Args:
      file_paths (list): Lista di percorsi ai file CSV dei vini bianchi e rossi.

  Returns:
      pd.DataFrame: Il DataFrame combinato con la colonna target "is_red".
  """

  data_white = pd.read_csv(file_paths[0], delimiter=";")
  data_red = pd.read_csv(file_paths[1], delimiter=";")

  data_white["is_red"] = 0
  data_red["is_red"] = 1

  data = pd.concat([data_white, data_red], ignore_index=True)
  return data
```

**2. transform.py**

```python
import pandas as pd

def transform_data(data):
  """
  Esegue operazioni di trasformazione sui dati (es. rimozione di valori nulli).

  Args:
      data (pd.DataFrame): DataFrame contenente i dati da trasformare.

  Returns:
      pd.DataFrame: DataFrame con le trasformazioni applicate.
  """

  data = data.dropna()  # Rimuovi valori nulli
  return data
```

**3. train.py**

```python
from sklearn.ensemble import RandomForestClassifier

def train_model(X_train, y_train):
  """
  Addestra un modello RandomForestClassifier.

  Args:
      X_train (pd.DataFrame): Caratteristiche di training.
      y_train (pd.Series): Target di training.

  Returns:
      RandomForestClassifier: Modello addestrato.
  """

  model = RandomForestClassifier()
  model.fit(X_train, y_train)
  return model
```

**4. evaluate.py**

```python
from sklearn.metrics import f1_score, precision_score, recall_score

def evaluate_model(model, X_test, y_test):
  """
  Valuta il modello utilizzando metriche di classificazione.

  Args:
      model (RandomForestClassifier): Modello da valutare.
      X_test (pd.DataFrame): Caratteristiche di test.
      y_test (pd.Series): Target di test.

  Returns:
      tuple: (F1 score, Precision score, Recall score)
  """

  y_pred = model.predict(X_test)
  f1 = f1_score(y_test, y_pred)
  precision = precision_score(y_test, y_pred)
  recall = recall_score(y_test, y_pred)
  return f1, precision, recall
```

**5. recipe.yaml**

```yaml
recipe: "wine_classification"

target_col: "is_red"

primary_metric: "f1_score"

steps:
  ingest: {{INGEST_CONFIG}}
  split:
    split_ratios: {{SPLIT_RATIOS}}
  transform: {{TRANSFORM_CONFIG}}
  train: {{TRAIN_CONFIG}}
  evaluate: {{EVALUATE_CONFIG}}
```

**6. local.yaml**

```yaml
experiment:
  name: "wine_classification_experiment"
  tracking_uri: "sqlite:///metadata/mlflow/mlruns.db"
  artifact_location: "/metadata/mlflow/mlartifacts"

model_registry:
  model_name: "wine_quality_classifier"

SPLIT_RATIOS: [0.8, 0.1, 0.1]

INGEST_CONFIG:
  using: "ingest.ingest_data"
  file_paths:
    - "./data/winequality-white.csv"
    - "./data/winequality-red.csv"

TRANSFORM_CONFIG:
  using: "transform.transform_data"

TRAIN_CONFIG:
  using: "train.train_model"
  model_type: "RandomForest" # Parametro aggiuntivo

EVALUATE_CONFIG:
  using: "evaluate.evaluate_model"
```