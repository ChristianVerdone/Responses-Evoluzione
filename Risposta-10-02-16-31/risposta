Per tradurre lo script Python in una **recipe MLflow**, dobbiamo suddividere il codice in script separati per ciascuno step (ingest, split, transform, train, evaluate) e creare i file `recipe.yaml` e `local.yaml`. Inoltre, dobbiamo gestire le dipendenze di Jinja2 e configurare correttamente i parametri.

Ecco la traduzione completa:

---

### **1. Script separati per ogni step**

#### **1.1. `ingest_step.py`**
```python
import pandas as pd
import logging

# Configura il logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def ingest_data(file_paths):
    """
    Carica i dati dai file CSV e li unisce.
    """
    logger.info("Caricamento dei dati...")
    data_white = pd.read_csv(file_paths[0], delimiter=';')
    data_red = pd.read_csv(file_paths[1], delimiter=';')

    # Aggiungi la colonna is_red (0 per bianco, 1 per rosso)
    data_white["is_red"] = 0
    data_red["is_red"] = 1

    # Unisci i due dataset
    data = pd.concat([data_white, data_red], ignore_index=True)
    logger.info("Dati caricati correttamente.")
    return data
```

---

#### **1.2. `split_step.py`**
```python
from sklearn.model_selection import train_test_split
import logging

# Configura il logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def split_data(X, y, split_ratios):
    """
    Divide i dati in training, validation e test set.
    """
    logger.info(f"Dividendo i dati con rapporti: {split_ratios}")
    X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=1 - split_ratios[0], random_state=42)
    X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp,
                                                    test_size=split_ratios[2] / (split_ratios[1] + split_ratios[2]),
                                                    random_state=42)
    logger.info("Dati divisi correttamente.")
    return X_train, X_val, X_test, y_train, y_val, y_test
```

---

#### **1.3. `transform_step.py`**
```python
import logging

# Configura il logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def transform_data(data):
    """
    Applica trasformazioni ai dati.
    """
    logger.info("Applicando trasformazioni ai dati...")
    data = data.dropna()  # Rimuovi valori nulli
    logger.info("Trasformazioni applicate correttamente.")
    return data
```

---

#### **1.4. `train_step.py`**
```python
from sklearn.ensemble import RandomForestClassifier
import logging

# Configura il logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def train_model(X_train, y_train):
    """
    Addestra un modello RandomForest.
    """
    logger.info("Addestramento del modello...")
    model = RandomForestClassifier()
    model.fit(X_train, y_train)
    logger.info("Modello addestrato correttamente.")
    return model
```

---

#### **1.5. `evaluate_step.py`**
```python
from sklearn.metrics import f1_score, precision_score, recall_score
import logging

# Configura il logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def evaluate_model(model, X_test, y_test):
    """
    Valuta il modello utilizzando F1, Precision e Recall.
    """
    logger.info("Valutazione del modello...")
    y_pred = model.predict(X_test)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    logger.info(f"F1 Score: {f1}, Precision: {precision}, Recall: {recall}")
    return f1, precision, recall
```

---

### **2. File `recipe.yaml`**
```yaml
recipe: "classification/v1"  # Il tipo di recipe Ã¨ classification
target_col: "is_red"
positive_class: 1
primary_metric: "f1_score"
steps:
  ingest: {{INGEST_CONFIG}}
  split: {{SPLIT_CONFIG}}
  transform: {{TRANSFORM_CONFIG}}
  train: {{TRAIN_CONFIG}}
  evaluate:
    validation_thresholds:
      f1_score: 0.85
      precision_score: 0.80
      recall_score: 0.75
    allow_non_validated_model: false
```

---

### **3. File `local.yaml`**
```yaml
experiment:
  name: "sklearn_classification_experiment"
  tracking_uri: "sqlite:///metadata/mlflow/mlruns.db"
  artifact_location: "/metadata/mlflow/mlartifacts"

model_registry:
  model_name: "wine_classifier"

INGEST_CONFIG:
  using: csv
  location: ["./data/winequality-white.csv", "./data/winequality-red.csv"]
  loader_method: ingest_data

SPLIT_CONFIG:
  split_ratios: [0.80, 0.10, 0.10]

TRANSFORM_CONFIG:
  transformer_fn: transform_data

TRAIN_CONFIG:
  estimator_fn: train_model
```

---

### **4. Script principale per eseguire la pipeline**
```python
import mlflow
from ingest_step import ingest_data
from split_step import split_data
from transform_step import transform_data
from train_step import train_model
from evaluate_step import evaluate_model

# Configurazione di MLflow
mlflow.set_tracking_uri("sqlite:///metadata/mlflow/mlruns.db")
mlflow.set_experiment("sklearn_classification_experiment")

# Ingestione dei dati
file_paths = ["./data/winequality-white.csv", "./data/winequality-red.csv"]
data = ingest_data(file_paths)

# Separazione in caratteristiche e target
target_col = "is_red"
X = data.drop(columns=[target_col])
y = data[target_col]

# Divisione dei dati
X_train, X_val, X_test, y_train, y_val, y_test = split_data(X, y, split_ratios=[0.80, 0.10, 0.10])

# Trasformazione dei dati
X_train = transform_data(X_train)
X_val = transform_data(X_val)
X_test = transform_data(X_test)

# Avvia un run di MLflow
with mlflow.start_run():
    # Addestramento del modello
    model = train_model(X_train, y_train)

    # Log del modello con MLflow
    mlflow.sklearn.log_model(model, "model")

    # Valutazione del modello
    f1, precision, recall = evaluate_model(model, X_test, y_test)

    # Log dei parametri e delle metriche
    mlflow.log_param("model_type", "RandomForest")
    mlflow.log_metric("f1_score", f1)
    mlflow.log_metric("precision_score", precision)
    mlflow.log_metric("recall_score", recall)

print("Esperimento completato!")
```

---

### **5. Dipendenze di Jinja2**
Assicurati di avere Jinja2 installato per gestire i template nei file YAML:
```bash
pip install Jinja2
```

---

### **Riepilogo**
- **Script separati**: Ogni step Ã¨ isolato in un file Python dedicato.
- **File YAML**: Configurazione della recipe e dei parametri.
- **Script principale**: Esegue la pipeline utilizzando MLflow.

Se hai bisogno di ulteriori chiarimenti o modifiche, fammelo sapere! ðŸ˜Š